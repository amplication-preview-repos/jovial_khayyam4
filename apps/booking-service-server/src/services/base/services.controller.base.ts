/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ServicesService } from "../services.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServicesCreateInput } from "./ServicesCreateInput";
import { Services } from "./Services";
import { ServicesFindManyArgs } from "./ServicesFindManyArgs";
import { ServicesWhereUniqueInput } from "./ServicesWhereUniqueInput";
import { ServicesUpdateInput } from "./ServicesUpdateInput";
import { BookingsFindManyArgs } from "../../bookings/base/BookingsFindManyArgs";
import { Bookings } from "../../bookings/base/Bookings";
import { BookingsWhereUniqueInput } from "../../bookings/base/BookingsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ServicesControllerBase {
  constructor(
    protected readonly service: ServicesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Services })
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createServices(
    @common.Body() data: ServicesCreateInput
  ): Promise<Services> {
    return await this.service.createServices({
      data: data,
      select: {
        categoryId: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Services] })
  @ApiNestedQuery(ServicesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async servicesItems(@common.Req() request: Request): Promise<Services[]> {
    const args = plainToClass(ServicesFindManyArgs, request.query);
    return this.service.servicesItems({
      ...args,
      select: {
        categoryId: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Services })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async services(
    @common.Param() params: ServicesWhereUniqueInput
  ): Promise<Services | null> {
    const result = await this.service.services({
      where: params,
      select: {
        categoryId: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Services })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateServices(
    @common.Param() params: ServicesWhereUniqueInput,
    @common.Body() data: ServicesUpdateInput
  ): Promise<Services | null> {
    try {
      return await this.service.updateServices({
        where: params,
        data: data,
        select: {
          categoryId: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Services })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteServices(
    @common.Param() params: ServicesWhereUniqueInput
  ): Promise<Services | null> {
    try {
      return await this.service.deleteServices({
        where: params,
        select: {
          categoryId: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bookingsItems")
  @ApiNestedQuery(BookingsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bookings",
    action: "read",
    possession: "any",
  })
  async findBookingsItems(
    @common.Req() request: Request,
    @common.Param() params: ServicesWhereUniqueInput
  ): Promise<Bookings[]> {
    const query = plainToClass(BookingsFindManyArgs, request.query);
    const results = await this.service.findBookingsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        id: true,

        service: {
          select: {
            id: true,
          },
        },

        specialistId: true,
        status: true,
        time: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookingsItems")
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "update",
    possession: "any",
  })
  async connectBookingsItems(
    @common.Param() params: ServicesWhereUniqueInput,
    @common.Body() body: BookingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingsItems: {
        connect: body,
      },
    };
    await this.service.updateServices({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookingsItems")
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "update",
    possession: "any",
  })
  async updateBookingsItems(
    @common.Param() params: ServicesWhereUniqueInput,
    @common.Body() body: BookingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingsItems: {
        set: body,
      },
    };
    await this.service.updateServices({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookingsItems")
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "update",
    possession: "any",
  })
  async disconnectBookingsItems(
    @common.Param() params: ServicesWhereUniqueInput,
    @common.Body() body: BookingsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingsItems: {
        disconnect: body,
      },
    };
    await this.service.updateServices({
      where: params,
      data,
      select: { id: true },
    });
  }
}
