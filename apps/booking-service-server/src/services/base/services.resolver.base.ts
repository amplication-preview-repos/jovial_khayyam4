/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Services } from "./Services";
import { ServicesCountArgs } from "./ServicesCountArgs";
import { ServicesFindManyArgs } from "./ServicesFindManyArgs";
import { ServicesFindUniqueArgs } from "./ServicesFindUniqueArgs";
import { CreateServicesArgs } from "./CreateServicesArgs";
import { UpdateServicesArgs } from "./UpdateServicesArgs";
import { DeleteServicesArgs } from "./DeleteServicesArgs";
import { BookingsFindManyArgs } from "../../bookings/base/BookingsFindManyArgs";
import { Bookings } from "../../bookings/base/Bookings";
import { ServicesService } from "../services.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Services)
export class ServicesResolverBase {
  constructor(
    protected readonly service: ServicesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "read",
    possession: "any",
  })
  async _servicesItemsMeta(
    @graphql.Args() args: ServicesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Services])
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "read",
    possession: "any",
  })
  async servicesItems(
    @graphql.Args() args: ServicesFindManyArgs
  ): Promise<Services[]> {
    return this.service.servicesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Services, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "read",
    possession: "own",
  })
  async services(
    @graphql.Args() args: ServicesFindUniqueArgs
  ): Promise<Services | null> {
    const result = await this.service.services(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Services)
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "create",
    possession: "any",
  })
  async createServices(
    @graphql.Args() args: CreateServicesArgs
  ): Promise<Services> {
    return await this.service.createServices({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Services)
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "update",
    possession: "any",
  })
  async updateServices(
    @graphql.Args() args: UpdateServicesArgs
  ): Promise<Services | null> {
    try {
      return await this.service.updateServices({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Services)
  @nestAccessControl.UseRoles({
    resource: "Services",
    action: "delete",
    possession: "any",
  })
  async deleteServices(
    @graphql.Args() args: DeleteServicesArgs
  ): Promise<Services | null> {
    try {
      return await this.service.deleteServices(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Bookings], { name: "bookingsItems" })
  @nestAccessControl.UseRoles({
    resource: "Bookings",
    action: "read",
    possession: "any",
  })
  async findBookingsItems(
    @graphql.Parent() parent: Services,
    @graphql.Args() args: BookingsFindManyArgs
  ): Promise<Bookings[]> {
    const results = await this.service.findBookingsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
