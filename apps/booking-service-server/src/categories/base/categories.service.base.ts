/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Categories as PrismaCategories } from "@prisma/client";

export class CategoriesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CategoriesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.categories.count(args);
  }

  async categoriesItems(
    args: Prisma.CategoriesFindManyArgs
  ): Promise<PrismaCategories[]> {
    return this.prisma.categories.findMany(args);
  }
  async categories(
    args: Prisma.CategoriesFindUniqueArgs
  ): Promise<PrismaCategories | null> {
    return this.prisma.categories.findUnique(args);
  }
  async createCategories(
    args: Prisma.CategoriesCreateArgs
  ): Promise<PrismaCategories> {
    return this.prisma.categories.create(args);
  }
  async updateCategories(
    args: Prisma.CategoriesUpdateArgs
  ): Promise<PrismaCategories> {
    return this.prisma.categories.update(args);
  }
  async deleteCategories(
    args: Prisma.CategoriesDeleteArgs
  ): Promise<PrismaCategories> {
    return this.prisma.categories.delete(args);
  }
}
