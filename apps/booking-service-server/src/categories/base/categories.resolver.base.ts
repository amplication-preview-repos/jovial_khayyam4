/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Categories } from "./Categories";
import { CategoriesCountArgs } from "./CategoriesCountArgs";
import { CategoriesFindManyArgs } from "./CategoriesFindManyArgs";
import { CategoriesFindUniqueArgs } from "./CategoriesFindUniqueArgs";
import { CreateCategoriesArgs } from "./CreateCategoriesArgs";
import { UpdateCategoriesArgs } from "./UpdateCategoriesArgs";
import { DeleteCategoriesArgs } from "./DeleteCategoriesArgs";
import { CategoriesService } from "../categories.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Categories)
export class CategoriesResolverBase {
  constructor(
    protected readonly service: CategoriesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Categories",
    action: "read",
    possession: "any",
  })
  async _categoriesItemsMeta(
    @graphql.Args() args: CategoriesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Categories])
  @nestAccessControl.UseRoles({
    resource: "Categories",
    action: "read",
    possession: "any",
  })
  async categoriesItems(
    @graphql.Args() args: CategoriesFindManyArgs
  ): Promise<Categories[]> {
    return this.service.categoriesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Categories, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Categories",
    action: "read",
    possession: "own",
  })
  async categories(
    @graphql.Args() args: CategoriesFindUniqueArgs
  ): Promise<Categories | null> {
    const result = await this.service.categories(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Categories)
  @nestAccessControl.UseRoles({
    resource: "Categories",
    action: "create",
    possession: "any",
  })
  async createCategories(
    @graphql.Args() args: CreateCategoriesArgs
  ): Promise<Categories> {
    return await this.service.createCategories({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Categories)
  @nestAccessControl.UseRoles({
    resource: "Categories",
    action: "update",
    possession: "any",
  })
  async updateCategories(
    @graphql.Args() args: UpdateCategoriesArgs
  ): Promise<Categories | null> {
    try {
      return await this.service.updateCategories({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Categories)
  @nestAccessControl.UseRoles({
    resource: "Categories",
    action: "delete",
    possession: "any",
  })
  async deleteCategories(
    @graphql.Args() args: DeleteCategoriesArgs
  ): Promise<Categories | null> {
    try {
      return await this.service.deleteCategories(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
